import copy
import pickle

class Person:
    def __init__(self, name: str, email: str, phone: str, favorite: bool):
        self.name = name
        self.email = email
        self.phone = phone
        self.favorite = favorite

    def __eq__(self, other):
        if isinstance(other, Person):
            return (self.name == other.name and
                    self.email == other.email and
                    self.phone == other.phone and
                    self.favorite == other.favorite)
        return False

    def __copy__(self):
        # Створюємо поверхневу копію об'єкта
        return Person(self.name, self.email, self.phone, self.favorite)

class AddressBook:
    def __init__(self):
        self.contacts = []

    def add_contact(self, person: Person):
        self.contacts.append(person)

    def remove_contact(self, person: Person):
        self.contacts = [contact for contact in self.contacts if contact != person]

    def __copy__(self):
        copy_obj = AddressBook()
        copy_obj.contacts = copy.copy(self.contacts)
        return copy_obj

    def __deepcopy__(self, memo):
        copy_obj = AddressBook()
        memo[id(self)] = copy_obj
        copy_obj.contacts = copy.deepcopy(self.contacts, memo)
        return copy_obj

def save_data(book, filename="addressbook.pkl"):
    with open(filename, "wb") as f:
        pickle.dump(book, f)

def load_data(filename="addressbook.pkl"):
    try:
        with open(filename, "rb") as f:
            return pickle.load(f)
    except FileNotFoundError:
        return AddressBook()  # Повернення нової адресної книги, якщо файл не знайдено

def main():
    book = load_data()

    # Основний цикл програми
    while True:
        command = input("Enter command (add, remove, list, save, load, quit): ").strip().lower()
        if command == "add":
            name = input("Enter name: ")
            email = input("Enter email: ")
            phone = input("Enter phone: ")
            favorite = input("Is favorite (yes/no): ").strip().lower() == 'yes'
            person = Person(name, email, phone, favorite)
            book.add_contact(person)
            print(f"Added {name}")
        elif command == "remove":
            name = input("Enter name to remove: ")
            person = next((p for p in book.contacts if p.name == name), None)
            if person:
                book.remove_contact(person)
                print(f"Removed {name}")
            else:
                print(f"No contact found with name {name}")
        elif command == "list":
            for contact in book.contacts:
                print(f"Name: {contact.name}, Email: {contact.email}, Phone: {contact.phone}, Favorite: {'Yes' if contact.favorite else 'No'}")
        elif command == "save":
            save_data(book)
            print("Address book saved.")
        elif command == "load":
            book = load_data()
            print("Address book loaded.")
        elif command == "quit":
            save_data(book)
            print("Address book saved. Exiting.")
            break
        else:
            print("Unknown command. Please try again.")

if __name__ == "__main__":
    main()

